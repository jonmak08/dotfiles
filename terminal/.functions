# List all the Homebrew formulas and it's dependencies.
function brewdeps {
	brew list | while read cask; do echo -n $fg[blue] $cask $fg[white]; brew deps $cask | awk '{printf(" %s ", $0)}'; echo ""; done
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Shows either the file name, alias info, or function definition for a given executable.
# @arguments name of function, alias, or script to list the details for
function details {
	if [[ `command -v "$1"` ]]; then
		cmd_type="$(type -t $1)"

		if [[ $cmd_type == "alias" ]]; then
			alias "$1" 2> /dev/null
		elif [[ $cmd_type == "file" ]]; then
			which "$1" 2> /dev/null
		elif [[ $cmd_type == "function" ]]; then
			declare -f "$1" 2> /dev/null
		else
			type -a "$1" 2> /dev/null
		fi
	else
		echo "$1 doesn't seem to exist"
	fi

	return 1
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Return the process id of the file running on port 3035
# Use lsof (List of Open Files)
function getnode {
	lsof -t -i:3035
}

# A simple grep to finding.
# @arguments (optional) path
function gr {
	grep -R '$1' '${2:-.}'
	# echo $1 ${2:.}
}

# Kill the node process running on port 3035
function killnode {
	pkill $(getnode)
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# Find a process that is currently running.
# @arguments name of process
function pf {
	ps ax | grep "$1" | grep -v grep | awk '{ print $1 }'
}

# Kill a process that is currently running.
# @arguments name of process
function pkill {
	pf $1 | xargs kill -9
	#ps -ef | grep PROCESS | grep -v grep | awk '{print $2}' | xargs kill -9
}

# resolve
# Find the original source of a symlink
# @arguments path to symlink
function resolve {
	[ ! -h '$1' ] && echo '$1' || (local link='$(expr '$(command ls -ld -- '$1')' : '.*-> \(.*\)$')'; cd $(dirname $1); resolve '$link' | sed 's|^\([^/].*\)\$|$(dirname $1)/\1|');
}


# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
