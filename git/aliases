[alias]
	## Branches
	##--------

	# Checkout
	co = checkout

	# Checkout last branch
	col = checkout -

	# Branch
	br = branch

	# Create a branch by name, or if it exists, checkout the branch
	cb = "!f() { git switch $1 2>/dev/null || git switch -c $1; }; f"

	# Recreate the current branch (deletes the local and remote, and recreates it)
	refresh = "!f() { git co $(git default-branch) && git db-all $1; git cb $1; }; f"

	# Move all commits after the passed one to a new branch
	# eg. git split 5c29ab4 custom-feature
	split = "!f() { git checkout -b $2 && msg=$(git stash save) && git checkout - && git reset --hard $1 && git checkout $2 && [[ ! $msg =~ ^'No local changes to save'$ ]] && git stash pop; }; f"

	# Rename branch
	rename = branch -m

	# Track remote branch
	track = !sh -c 'git branch -u origin/$0'

	## Committing
	##--------

	# Commit
	ci = commit

	# Commit w/ message
	cim = commit -m

	# Amend commit
	cia = commit --amend

	# Amend commit w/ message
	ciam = commit --amend -m

	# Add changed files and then commit w/ message
	cam = commit -a -m

	# Commit and add files
	ca = commit -a

	# These are the same as cam, ca and squish, except it adds new files as well
	acam = !git add -A && git commit -m
	aca = !git add -A && git commit
	asquish = !git add -A && git commit --amend -C HEAD

	# Adds all changed files into the last commit
	squish = commit -a --amend -C HEAD

	# Adds only staged files into the last commit
	squeeze = commit --amend -C HEAD

	## Deleting
	##--------

	# Delete a local branch
	db = branch -D

	# Delete a remote branch
	db-remote = !sh -c 'git push origin :$0'

	# Delete both the local and remote branches
	db-all = !sh -c 'git db $0 && git db-remote $0'

	# Delete the current local branch and checkout the default branch
	dbc = "!f() { local bn=$1; [[ -z $bn ]] && bn=$(git brn); master=$(git default-branch); [[ $bn == $master ]] && echo Cannot remove "$master" && exit; git co $master && git db $bn; }; f"

	# Delete branches that have already been merged with main.
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	## Diffing
	##--------

	dt = difftool
	dtc = difftool --cached

	# Diff current changes that are different from the default branch
	diffm = !git diff $(git default-branch)..

	# List the filenames and diff stats for a commit/treeish
	dl = "!f() { ref_spec=$(git get-custom-refspec $1); git get-diffstats $ref_spec; }; f"

	# List the filenames and diff stats for changes against the default branch
	dlm = "!f() { git get-diffstats -f $(git default-branch)..; }; f"

	# List the filenames and diff stats relative to the current directory for changes against the default branch
	dlmr = "!f() { git get-diffstats -f -r $(git default-branch)..; }; f"

	# Show the patch for a commit/treeish
	delta = "!f() { ref_spec=$(git get-custom-refspec $1); git diff $ref_spec; }; f"

	# Show *just* the file names that have been changed for a commit/treeish
	ldl = "!f() { local ref_spec=$(git get-custom-refspec $1); git diff --pretty='format:' --name-only $ref_spec; }; f"

	## Fetching
	##--------

	# Fetch the current branch from origin
	fo = fetch origin

	## Logging
	##--------

	# Pretty graph
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(cyan)<%an>%Creset' --abbrev-commit --date=relative

	lgd = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(cyan)<%an>%Creset' --abbrev-commit --date=default

	# Log graph with the names of the files that have changed
	lgst = !git lg --stat $@

	# Log graph with the changes between the current branch and the default branch
	lgm = !git lg $(git default-branch)..

	# Log graph with grepping on the log
	lgg = "!f() { git lg --grep=\"$1\"; }; f"

	# Log graph with searching the changes
	lgs = "!f() { git lg -S\"$1\"; }; f"

	# Log graph of just the latest commit
	hd = !git --no-pager log --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(cyan)<%an>%Creset' --abbrev-commit --date=relative -1

	hdd = !git lgd -1
	head = !git log -n1
	tip = !git log --format=format:%h | head -1
	tipl = !git log --format=format:%H | head -1

	## Merging
	##--------

	# Merge
	mg = merge

	# Merge abort
	mga = merge --abort

	# Merge the default branch into current branch
	mm = !git merge $(git default-branch)

	# Merge the origin default branch into the current branch
	mo = !git merge origin/$(git default-branch)

	## Open changed files
	##--------

	# Open batch of files
	bopen = "!f() { local ref_spec=$(git get-custom-refspec $1); editor=`git config --get core.editor`; files=`git diff --pretty=format: --name-only $ref_spec`; for i in $files; do echo opening $i; done; $editor $files; exit; }; f"

	# Open all files that are different from the default branch
	openm = "!f() { git open diff \"$@\" $(git default-branch)..; }; f"

	## Misc
	##--------

	# Same as add, but uses the verbose option since git add doesn't inform you of what exactly you just added
	aa = add -v

	# Get the current branch name
	brn = "!git branch $* | grep '^*' | sed 's/^* //'"

	# Remove untracked files and folders
	cln = "clean -fd"

	# Cherry-pick
	cp = cherry-pick

	# Shortcut for help
	h = help

	# Open jira ticket
	jira = "!f() { local branch_name=$(git brn); local url='https://gustohq.atlassian.net/browse/'; open-in-browser ${url}${branch_name}; exit; }; f"

	# List ignored files
	ls-ignored = ls-files --exclude-standard --ignored --others

	# Checkout default branch
	m = !git co $(git default-branch)

	# Remove last commit
	pop = reset HEAD^

	# Show status of current branch
	st = status

	# Get a range based commit-ish based on the passed sha. Uses HEAD by default, but if a sha is passed, it creates a range
	# that refers to one previous. If you pass a range, it will leave it untouched so that you can customize the range yourself.
	# Used in many aliases
	# eg. git get-custom-refspec					# prints HEAD^..HEAD
	#     git get-custom-refspec ^					# prints HEAD^..
	#     git get-custom-refspec 81c35e1			# prints 81c35e1^..81c35e1
	#     git get-custom-refspec 5250022..master	# prints 5250022..master
	get-custom-refspec = "!f() { to_rev=${1:-HEAD}; [[ $to_rev == ^ ]] && to_rev=HEAD^..; old_head=${to_rev}^; new_head=$to_rev; if [[ $to_rev == *..* ]]; then old_head=${to_rev%%..*}; new_head=${to_rev#*..*}; fi; ref_spec=$old_head..$new_head; echo $ref_spec; }; f"

	# Display all changed CSS files against a commit/treeish
	css = "!f() { ref_spec=$(git get-custom-refspec $1); git diff --stat --name-only $ref_spec | grep -E '.(s)?css$' | xargs }; f"

	# Display all change JS files against a commit/treeish
	js = "!f() { ref_spec=$(git get-custom-refspec $1); git diff --stat --name-only $ref_spec | grep -E '.js$' | xargs }; f"

	# Display all change CSS files against the default branch
	cssm = "!f() { git css $(git default-branch)..; }; f"

	# Display all change JS files against the default branch
	jsm = "!f() { git js $(git default-branch)..; }; f"

	## Patching
	##--------

	# Create patch from files and save them to a directory called patch_files
	fp = format-patch -o patch_files

	# Save patch
	save = stash save --patch

	## Pushing
	##--------

	# Syncs from upstream, then pushes the default branch to origin and upstream
	push-allm = "!master=$(git default-branch); git sync-origin $master && git push origin $master && git push upstream $master;"

	# Syncs current local branch from remote origin, then pushes the current branch to origin
	push-all = "!f() { current_branch=$(git brn); git sync-origin $current_branch && git push origin $current_branch; }; f"

	# Push the current branch to origin and upstream
	pa = !git push-all

	# Push the default branch to origin and upstream
	pam = !git push-allm

	# Push to origin
	po = push origin

	# Push the default branch to upstream
	pum = push upstream $(git default-branch)

	# Force push the current branch to origin
	pbo = !git push -f origin $(git brn)

	## Rebasing
	##--------

	# Rebase
	rb = rebase

	# Abort rebase
	rba = rebase --abort

	# Continue rebase
	rbc = rebase --continue

	# Skip patch
	rbs = rebase --skip

	# Rebase interactively
	rbi = rebase -i

	# Rebase on top of the default branch
	rbm = !git rebase $(git default-branch)

	# Rebase on top of the default branch interactively
	rbim = rebase -i $(git default-branch)

	## Resetting
	##--------

	# Reset
	rs = reset

	# Reset hard
	rsh = reset --hard

	# Reset soft
	rss = reset --soft

	## Stashing
	##--------

	# Apply stash (newest by default)
	sa = "!f() { local stash_rev=stash@{${1:-0}}; git stash apply $stash_rev;  }; f"

	# Pop stash (newest by default)
	sp = "!f() { local stash_rev=stash@{${1:-0}}; git stash pop $stash_rev;  }; f"

	# Save stash (includes untracked files)
	ss = !git add . && git stash save

	# List all entries in the stash
	sl = stash list

	# List all entries in the stash with the --stat option
	# (I really hate having to do it this way. Currently, passing the --stat option to stash list will give way too many files)
	sls = "!f() { limit=\"$1\"; [[ -z \"$limit\" ]] && limit=$(git log --format=\"%gd\" -g refs/stash | wc -l) && let limit-=1; for (( c=0; c<=$limit; c++ )); do echo \"stash@{$c}\"; git stash show stash@{$c}; echo \"---\"; done }; f"

	# Show stash
	sh = "!f() { local stash_rev=stash@{${1:-0}}; git stash show $stash_rev;  }; f"

	# Show stash patch
	shp = "!f() { local stash_rev=stash@{${1:-0}}; git stash show -p $stash_rev;  }; f"

	## Switching
	##--------

	# Fetch a remote branch from origin and create it locally
	get = !sh -c 'git switch -c $0 --track origin/$0'

	## Submodules
	##--------

	# Update submodules
	subu = "!f() { cd $(git rev-parse --show-toplevel) && git submodule update; }; f"

	# Update submodules and initialize them
	subi = "!f() { cd $(git rev-parse --show-toplevel) && git submodule update --init; }; f"

	## Syncing
	##--------

	# Sync the default branch from upstream to origin
	# This alias will stash current changes, switch to the default branch, sync, then switch back to the original branch and apply the stash
	som = "!f() { local current_branch=$(git brn); local saved_index=0; local stash_save_result=`git stash save`; [[ $stash_save_result == *\"HEAD is now at\"* ]] && saved_index=1; master=$(git default-branch); git checkout $master && git sync-origin $master && git checkout $current_branch && ([[ $saved_index == 1 ]]) && git stash pop; }; f;"

	# Sync the local default branch with changes from the default origin branch
	so = !git sync-origin $(git default-branch)

	# Sync the local current branch from origin branch
	sbo = !git sync-origin $(git brn)

	# Update current branch from origin
	ubo = !git pull --rebase origin $(git brn)

	# Update current branch from upstream
	ubu = !git pull --rebase upstream $(git brn)
